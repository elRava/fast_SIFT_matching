% Searching parallel hierarchical clustering trees
% Input: hierarchical clustering trees Ti, query point Q, K
% Output: K nearest approximate neighbors of query point
% Parameters: max number of points to examine Lmax

function neighbors = tree_search(T, Q, K, Lmax)
    L = 0; % number of point searched
    PQ = PriorityQueue(); % empty priority queue
    R = PriorityQueue(); % empty priority queue
    
    PQ = traverse_tree(T.root, PQ, R);
    
    while PQ.size() ~= 0 && L < Lmax
        [N, pri] = PQ.pop();
        PQ = traverse_tree(N, PQ, R);
    end
    
    neighbors = [];
    for i = 1 : K
        [N, pri] = PQ.pop();
        neighbors = [neighbors; ]
    end
    
end


function [pq, r, l] = traverse_tree(N, PQ, R, Q)

    pq = PQ;
    r = R;
    l = 0;

    if size(N.children) == 0
        for des = N.descriptor_set
            r.push(norm(des.val - Q.val), des);
            l = l + 1;
        end
    else
        C = N.children;
        % get closest node of C to query Q
        min = 1;
        for i = 2 : size(C)
           if norm(des.val - Q.val) < norm(des.val - Q.val)
               
           end
        end
        
        
        
    end

end